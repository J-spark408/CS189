#pragma once
// I am going to match the names that STL uses so you don't get confused in the real world.  I'm skipping operator [] for a specific reason that
// doesn't come up for a few weeks.

template<typename T> // Whatever main puts in the <> gets find-replaced to every "T"
class Vector
{
	T* mData;
	int mSize; // Size is how much data.  Capacity is how much memory.
	int mCapacity;// For testing purposes, initialize this to 15.  Whenever you allocate new memory, double it.

	static T sUndefined;// Lots of STL functions say that doing something naughty gets "undefined behavior".  It could throw, crash, make you eggs, or return nonsense.
				// Return this undefined one if anybody ever tries to go out of bounds. 
				// I've also seen this done with a static.  I'll do that in List later

public:
	Vector()// O(1)
	{
		mSize = 0;
		mCapacity = 15;
		mData = new T[mCapacity];
		// If you put a new in here, you'd be duplicating the reserve code.  Feel free to call non-virtual methods of your own here.
		// (You can't call a virtual method because the whole object isn't finished constructing yet.)
	}
	Vector(const Vector<T>& tOther) : Vector()// O(n)
	{
		Reserve(tOther.Capacity());

		for (int i = 0; i < tOther.Size(); i++)
		{
			mData[i] = tOther.At(i);
		}
		mSize = tOther.Size();
	}
	// There is a sneaky way to combine assignment and copy by having one call the other.  They are 90% the same.
	Vector& operator =(const Vector<T>& tRHS)// O(n)
	{
		Reserve(tRHS.Capacity());

		for (int i = 0; i < tRHS.Size(); i++)
		{
			mData[i] = tRHS.At(i);
		}
		mSize = tRHS.Size();
		return *this; // This line is weird so I'm just giving it to ya.  It has to be the last line.  It's just the definition of an =
	}
	// Big 3
	~Vector()
	{
		delete[] mData;
		// Free all memory
	}
	void PushBack(const T& tItem)// O(1)
	{
		if (mSize == mCapacity)
		{
			Reserve(2 * mCapacity);
		}
		mData[mSize] = tItem;
		mSize++;
	}
	void PopBack()// O(1)
	{
		if (mSize > 0)
			mSize--;
	}
	T& At(int tWhere) const// O(1)
	{
		if (tWhere < 0 || tWhere >= mSize)
		{
			return sUndefined;
		}
		return mData[tWhere];
	}
	void Clear()// O(1)
	{
		mSize = 0;
	}
	int Size() const// O(1)
	{
		return mSize;
	}
	int Capacity() const// O(1)
	{
		return mCapacity;
	}
	void Reserve(int tCount)// O(n)
	{
		// This is the hard one.  The rest are 1-4 lines.  I'm not saying reducing line count is something anybody cares about,
		// I'm just pointing out the scope.  Sometimes people get to fifty lines on something and then complain it's too hard.
		int tSize = mSize;
		if (tCount < tSize)
			tSize = tCount;

		T* tData = new T[tCount];

		for (int i = 0; i < tSize; i++)
		{
			tData[i] = mData[i];
		}
		delete[] mData;

		mSize = tSize;
		mCapacity = tCount;
		mData = tData;
	}
};
template<typename T>
T Vector<T>::sUndefined;
